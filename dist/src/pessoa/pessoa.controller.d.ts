import { PessoaService } from './pessoa.service';
import { Prisma } from '@prisma/client';
export declare class PessoaController {
    private readonly pessoaService;
    constructor(pessoaService: PessoaService);
    backup(): Promise<string>;
    findall(take: string, skip: string, filter?: string): Promise<{
        id: string;
        nome: string;
        createdAt: Date;
        updatedAt: Date | null;
        observacao: string | null;
        cep: string;
        logradouro: string;
        complemento: string | null;
        bairro: string;
        localidade: string;
        numero: string;
        uf: string;
        status: import(".prisma/client").$Enums.status_code;
        email: string | null;
        telefone: string | null;
        equipamentoId: string;
        cpf: string;
        sexo: string;
        datanascimento: Date;
        rg: string | null;
        parentesco: string | null;
        escolaridade: string;
        estadocivil: string;
        renda: Prisma.Decimal;
        ctpsassinada: number;
        ppcl: number;
        gestante: number;
        observacaorestrita: string | null;
        pessoaId: string | null;
    }[]>;
    findallForRelatorioPorData(dateinicial: string, datefinal: string, filter?: string): Promise<{
        id: string;
        nome: string;
        createdAt: Date;
        updatedAt: Date | null;
        observacao: string | null;
        cep: string;
        logradouro: string;
        complemento: string | null;
        bairro: string;
        localidade: string;
        numero: string;
        uf: string;
        status: import(".prisma/client").$Enums.status_code;
        email: string | null;
        telefone: string | null;
        equipamentoId: string;
        cpf: string;
        sexo: string;
        datanascimento: Date;
        rg: string | null;
        parentesco: string | null;
        escolaridade: string;
        estadocivil: string;
        renda: Prisma.Decimal;
        ctpsassinada: number;
        ppcl: number;
        gestante: number;
        observacaorestrita: string | null;
        pessoaId: string | null;
    }[]>;
    create(createPessoaDto: Prisma.PessoaCreateInput): Promise<{
        id: string;
        nome: string;
        createdAt: Date;
        updatedAt: Date | null;
        observacao: string | null;
        cep: string;
        logradouro: string;
        complemento: string | null;
        bairro: string;
        localidade: string;
        numero: string;
        uf: string;
        status: import(".prisma/client").$Enums.status_code;
        email: string | null;
        telefone: string | null;
        equipamentoId: string;
        cpf: string;
        sexo: string;
        datanascimento: Date;
        rg: string | null;
        parentesco: string | null;
        escolaridade: string;
        estadocivil: string;
        renda: Prisma.Decimal;
        ctpsassinada: number;
        ppcl: number;
        gestante: number;
        observacaorestrita: string | null;
        pessoaId: string | null;
    } | {
        error: any;
    }>;
    findbyid(id: string): Promise<any>;
    findbyidEntrega(id: string): Promise<any>;
    update(id: string, updatePessoaDto: Prisma.PessoaUpdateInput): Promise<{
        id: string;
        nome: string;
        createdAt: Date;
        updatedAt: Date | null;
        observacao: string | null;
        cep: string;
        logradouro: string;
        complemento: string | null;
        bairro: string;
        localidade: string;
        numero: string;
        uf: string;
        status: import(".prisma/client").$Enums.status_code;
        email: string | null;
        telefone: string | null;
        equipamentoId: string;
        cpf: string;
        sexo: string;
        datanascimento: Date;
        rg: string | null;
        parentesco: string | null;
        escolaridade: string;
        estadocivil: string;
        renda: Prisma.Decimal;
        ctpsassinada: number;
        ppcl: number;
        gestante: number;
        observacaorestrita: string | null;
        pessoaId: string | null;
    } | {
        error: any;
    }>;
    findAllFamiliares(id: string, take: string, skip: string, filter?: string): Promise<{
        id: string;
        nome: string;
        createdAt: Date;
        updatedAt: Date | null;
        observacao: string | null;
        cep: string;
        logradouro: string;
        complemento: string | null;
        bairro: string;
        localidade: string;
        numero: string;
        uf: string;
        status: import(".prisma/client").$Enums.status_code;
        email: string | null;
        telefone: string | null;
        equipamentoId: string;
        cpf: string;
        sexo: string;
        datanascimento: Date;
        rg: string | null;
        parentesco: string | null;
        escolaridade: string;
        estadocivil: string;
        renda: Prisma.Decimal;
        ctpsassinada: number;
        ppcl: number;
        gestante: number;
        observacaorestrita: string | null;
        pessoaId: string | null;
    }[]>;
    chagneResponsavelFamiliar(idFamilar: string): Promise<{
        menssage: string;
        error?: undefined;
    } | {
        error: any;
        menssage?: undefined;
    }>;
    changeStatusPessoa(id: string): Promise<{
        id: string;
        nome: string;
        createdAt: Date;
        updatedAt: Date | null;
        observacao: string | null;
        cep: string;
        logradouro: string;
        complemento: string | null;
        bairro: string;
        localidade: string;
        numero: string;
        uf: string;
        status: import(".prisma/client").$Enums.status_code;
        email: string | null;
        telefone: string | null;
        equipamentoId: string;
        cpf: string;
        sexo: string;
        datanascimento: Date;
        rg: string | null;
        parentesco: string | null;
        escolaridade: string;
        estadocivil: string;
        renda: Prisma.Decimal;
        ctpsassinada: number;
        ppcl: number;
        gestante: number;
        observacaorestrita: string | null;
        pessoaId: string | null;
    } | {
        error: string;
    }>;
    findallInativePessoas(take: string, skip: string, filter?: string): Promise<{
        id: string;
        nome: string;
        createdAt: Date;
        updatedAt: Date | null;
        observacao: string | null;
        cep: string;
        logradouro: string;
        complemento: string | null;
        bairro: string;
        localidade: string;
        numero: string;
        uf: string;
        status: import(".prisma/client").$Enums.status_code;
        email: string | null;
        telefone: string | null;
        equipamentoId: string;
        cpf: string;
        sexo: string;
        datanascimento: Date;
        rg: string | null;
        parentesco: string | null;
        escolaridade: string;
        estadocivil: string;
        renda: Prisma.Decimal;
        ctpsassinada: number;
        ppcl: number;
        gestante: number;
        observacaorestrita: string | null;
        pessoaId: string | null;
    }[]>;
}
