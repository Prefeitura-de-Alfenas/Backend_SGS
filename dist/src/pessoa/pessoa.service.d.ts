import { PrismaService } from 'src/prisma/prisma.service';
import { MoverPessoaDto } from './dto/pessoadto';
export declare class PessoaService {
    private prisma;
    constructor(prisma: PrismaService);
    importDataFromCsv(): Promise<void>;
    findbyidEntrega(id: string): Promise<any>;
    changeResponsavelFamiliar(idFamilar: string): Promise<{
        menssage: string;
        error?: undefined;
    } | {
        error: any;
        menssage?: undefined;
    }>;
    create(createPessoaDto: any): Promise<({
        pessoaFonteRenda: {
            pessoaId: string;
            fonteRendaId: string;
        }[];
        pessoaDeficiencia: {
            pessoaId: string;
            deficienciaId: string;
        }[];
    } & {
        id: string;
        nome: string;
        cpf: string;
        sexo: string;
        whastapp: number;
        telefone: string;
        email: string;
        datanascimento: Date;
        rg: string;
        parentesco: string;
        escolaridade: string;
        estadocivil: string;
        renda: import("@prisma/client/runtime/library").Decimal;
        ctpsassinada: number;
        ppcl: number;
        gestante: number;
        observacao: string;
        observacaorestrita: string;
        cep: string;
        logradouro: string;
        complemento: string;
        bairro: string;
        localidade: string;
        numero: string;
        uf: string;
        status: import(".prisma/client").$Enums.status_code;
        equipamentoId: string;
        pessoaId: string;
        createdAt: Date;
        updatedAt: Date;
    }) | {
        error: any;
    }>;
    update(id: string, updatePessoaDto: any): Promise<{
        id: string;
        nome: string;
        cpf: string;
        sexo: string;
        whastapp: number;
        telefone: string;
        email: string;
        datanascimento: Date;
        rg: string;
        parentesco: string;
        escolaridade: string;
        estadocivil: string;
        renda: import("@prisma/client/runtime/library").Decimal;
        ctpsassinada: number;
        ppcl: number;
        gestante: number;
        observacao: string;
        observacaorestrita: string;
        cep: string;
        logradouro: string;
        complemento: string;
        bairro: string;
        localidade: string;
        numero: string;
        uf: string;
        status: import(".prisma/client").$Enums.status_code;
        equipamentoId: string;
        pessoaId: string;
        createdAt: Date;
        updatedAt: Date;
    } | {
        error: any;
    }>;
    findAll(take: string, skip: string, filter: string): Promise<{
        id: string;
        nome: string;
        cpf: string;
        sexo: string;
        whastapp: number;
        telefone: string;
        email: string;
        datanascimento: Date;
        rg: string;
        parentesco: string;
        escolaridade: string;
        estadocivil: string;
        renda: import("@prisma/client/runtime/library").Decimal;
        ctpsassinada: number;
        ppcl: number;
        gestante: number;
        observacao: string;
        observacaorestrita: string;
        cep: string;
        logradouro: string;
        complemento: string;
        bairro: string;
        localidade: string;
        numero: string;
        uf: string;
        status: import(".prisma/client").$Enums.status_code;
        equipamentoId: string;
        pessoaId: string;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    findAllRelatorioPorData(dateinicial: string, datefinal: string, filter: string): Promise<{
        id: string;
        nome: string;
        cpf: string;
        sexo: string;
        whastapp: number;
        telefone: string;
        email: string;
        datanascimento: Date;
        rg: string;
        parentesco: string;
        escolaridade: string;
        estadocivil: string;
        renda: import("@prisma/client/runtime/library").Decimal;
        ctpsassinada: number;
        ppcl: number;
        gestante: number;
        observacao: string;
        observacaorestrita: string;
        cep: string;
        logradouro: string;
        complemento: string;
        bairro: string;
        localidade: string;
        numero: string;
        uf: string;
        status: import(".prisma/client").$Enums.status_code;
        equipamentoId: string;
        pessoaId: string;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    findById(id: string): Promise<any>;
    findFamiliiaresByid(id: string): Promise<any>;
    findAllFamiliares(id: string, take: string, skip: string, filter: string): Promise<{
        id: string;
        nome: string;
        cpf: string;
        sexo: string;
        whastapp: number;
        telefone: string;
        email: string;
        datanascimento: Date;
        rg: string;
        parentesco: string;
        escolaridade: string;
        estadocivil: string;
        renda: import("@prisma/client/runtime/library").Decimal;
        ctpsassinada: number;
        ppcl: number;
        gestante: number;
        observacao: string;
        observacaorestrita: string;
        cep: string;
        logradouro: string;
        complemento: string;
        bairro: string;
        localidade: string;
        numero: string;
        uf: string;
        status: import(".prisma/client").$Enums.status_code;
        equipamentoId: string;
        pessoaId: string;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    changeStatus(id: string): Promise<{
        id: string;
        nome: string;
        cpf: string;
        sexo: string;
        whastapp: number;
        telefone: string;
        email: string;
        datanascimento: Date;
        rg: string;
        parentesco: string;
        escolaridade: string;
        estadocivil: string;
        renda: import("@prisma/client/runtime/library").Decimal;
        ctpsassinada: number;
        ppcl: number;
        gestante: number;
        observacao: string;
        observacaorestrita: string;
        cep: string;
        logradouro: string;
        complemento: string;
        bairro: string;
        localidade: string;
        numero: string;
        uf: string;
        status: import(".prisma/client").$Enums.status_code;
        equipamentoId: string;
        pessoaId: string;
        createdAt: Date;
        updatedAt: Date;
    } | {
        error: string;
    }>;
    findAllInativePessoas(take: string, skip: string, filter: string): Promise<{
        id: string;
        nome: string;
        cpf: string;
        sexo: string;
        whastapp: number;
        telefone: string;
        email: string;
        datanascimento: Date;
        rg: string;
        parentesco: string;
        escolaridade: string;
        estadocivil: string;
        renda: import("@prisma/client/runtime/library").Decimal;
        ctpsassinada: number;
        ppcl: number;
        gestante: number;
        observacao: string;
        observacaorestrita: string;
        cep: string;
        logradouro: string;
        complemento: string;
        bairro: string;
        localidade: string;
        numero: string;
        uf: string;
        status: import(".prisma/client").$Enums.status_code;
        equipamentoId: string;
        pessoaId: string;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    moverPessoaParaOutroResponsavel(data: MoverPessoaDto): Promise<{
        error: string;
        message?: undefined;
        pessoaAtualizada?: undefined;
    } | {
        message: string;
        pessoaAtualizada: {
            id: string;
            nome: string;
            cpf: string;
            sexo: string;
            whastapp: number;
            telefone: string;
            email: string;
            datanascimento: Date;
            rg: string;
            parentesco: string;
            escolaridade: string;
            estadocivil: string;
            renda: import("@prisma/client/runtime/library").Decimal;
            ctpsassinada: number;
            ppcl: number;
            gestante: number;
            observacao: string;
            observacaorestrita: string;
            cep: string;
            logradouro: string;
            complemento: string;
            bairro: string;
            localidade: string;
            numero: string;
            uf: string;
            status: import(".prisma/client").$Enums.status_code;
            equipamentoId: string;
            pessoaId: string;
            createdAt: Date;
            updatedAt: Date;
        };
        error?: undefined;
    }>;
    buscarPessoaPorCpf(cpf: string): Promise<{
        id: string;
        nome: string;
        pessoaId: string;
    } | {
        error: string;
    }>;
    buscaEnderecoRepetido(cep: string, numero: string): Promise<{
        id: string;
        nome: string;
        cpf: string;
        sexo: string;
        whastapp: number;
        telefone: string;
        email: string;
        datanascimento: Date;
        rg: string;
        parentesco: string;
        escolaridade: string;
        estadocivil: string;
        renda: import("@prisma/client/runtime/library").Decimal;
        ctpsassinada: number;
        ppcl: number;
        gestante: number;
        observacao: string;
        observacaorestrita: string;
        cep: string;
        logradouro: string;
        complemento: string;
        bairro: string;
        localidade: string;
        numero: string;
        uf: string;
        status: import(".prisma/client").$Enums.status_code;
        equipamentoId: string;
        pessoaId: string;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
}
