import { Prisma } from '@prisma/client';
import { PrismaService } from 'src/prisma/prisma.service';
import { CreateEntregaDto } from './DTO/EntregaCreate';
import { BuscaEntrega } from './DTO/BuscaEntrega';
export declare class EntregraService {
    private prisma;
    constructor(prisma: PrismaService);
    create(createEntregaDTO: CreateEntregaDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date | null;
        observacao: string;
        status: import(".prisma/client").$Enums.status_code;
        equipamentoId: string;
        usuarioId: string;
        quantidade: number;
        datacadastro: Date;
        pessoId: string;
        beneficioId: string;
    } | {
        error: any;
    }>;
    findAllForPessoas(id: string, take: string, skip: string, filter: string): Promise<({
        pessoa: {
            id: string;
            nome: string;
            createdAt: Date;
            updatedAt: Date | null;
            observacao: string | null;
            cep: string;
            logradouro: string;
            complemento: string | null;
            bairro: string;
            localidade: string;
            numero: string;
            uf: string;
            status: import(".prisma/client").$Enums.status_code;
            email: string | null;
            telefone: string | null;
            equipamentoId: string;
            cpf: string;
            sexo: string;
            datanascimento: Date;
            rg: string | null;
            parentesco: string | null;
            escolaridade: string;
            estadocivil: string;
            renda: Prisma.Decimal;
            ctpsassinada: number;
            ppcl: number;
            gestante: number;
            observacaorestrita: string | null;
            pessoaId: string | null;
        };
        beneficio: {
            id: string;
            nome: string;
            createdAt: Date;
            updatedAt: Date | null;
            status: import(".prisma/client").$Enums.status_code;
            descricao: string;
            categoria: string;
            valor: Prisma.Decimal;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date | null;
        observacao: string;
        status: import(".prisma/client").$Enums.status_code;
        equipamentoId: string;
        usuarioId: string;
        quantidade: number;
        datacadastro: Date;
        pessoId: string;
        beneficioId: string;
    })[] | {
        error: any;
    }>;
    findAll(take: string, skip: string, filter: string): Promise<({
        pessoa: {
            id: string;
            nome: string;
            createdAt: Date;
            updatedAt: Date | null;
            observacao: string | null;
            cep: string;
            logradouro: string;
            complemento: string | null;
            bairro: string;
            localidade: string;
            numero: string;
            uf: string;
            status: import(".prisma/client").$Enums.status_code;
            email: string | null;
            telefone: string | null;
            equipamentoId: string;
            cpf: string;
            sexo: string;
            datanascimento: Date;
            rg: string | null;
            parentesco: string | null;
            escolaridade: string;
            estadocivil: string;
            renda: Prisma.Decimal;
            ctpsassinada: number;
            ppcl: number;
            gestante: number;
            observacaorestrita: string | null;
            pessoaId: string | null;
        };
        beneficio: {
            id: string;
            nome: string;
            createdAt: Date;
            updatedAt: Date | null;
            status: import(".prisma/client").$Enums.status_code;
            descricao: string;
            categoria: string;
            valor: Prisma.Decimal;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date | null;
        observacao: string;
        status: import(".prisma/client").$Enums.status_code;
        equipamentoId: string;
        usuarioId: string;
        quantidade: number;
        datacadastro: Date;
        pessoId: string;
        beneficioId: string;
    })[] | {
        error: any;
    }>;
    findById(id: string): Promise<({
        equipamento: {
            id: string;
            nome: string;
            createdAt: Date;
            updatedAt: Date | null;
            responsavel: string;
            sobre: string;
            observacao: string;
            cep: string;
            logradouro: string;
            complemento: string | null;
            bairro: string;
            localidade: string;
            numero: string;
            uf: string;
            status: import(".prisma/client").$Enums.status_code;
        };
        usuario: {
            id: string;
            nome: string;
            createdAt: Date;
            updatedAt: Date | null;
            status: import(".prisma/client").$Enums.status_code;
            email: string;
            senha: string;
            telefone: string;
            equipamentoId: string;
        };
        pessoa: {
            id: string;
            nome: string;
            createdAt: Date;
            updatedAt: Date | null;
            observacao: string | null;
            cep: string;
            logradouro: string;
            complemento: string | null;
            bairro: string;
            localidade: string;
            numero: string;
            uf: string;
            status: import(".prisma/client").$Enums.status_code;
            email: string | null;
            telefone: string | null;
            equipamentoId: string;
            cpf: string;
            sexo: string;
            datanascimento: Date;
            rg: string | null;
            parentesco: string | null;
            escolaridade: string;
            estadocivil: string;
            renda: Prisma.Decimal;
            ctpsassinada: number;
            ppcl: number;
            gestante: number;
            observacaorestrita: string | null;
            pessoaId: string | null;
        };
        beneficio: {
            id: string;
            nome: string;
            createdAt: Date;
            updatedAt: Date | null;
            status: import(".prisma/client").$Enums.status_code;
            descricao: string;
            categoria: string;
            valor: Prisma.Decimal;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date | null;
        observacao: string;
        status: import(".prisma/client").$Enums.status_code;
        equipamentoId: string;
        usuarioId: string;
        quantidade: number;
        datacadastro: Date;
        pessoId: string;
        beneficioId: string;
    }) | {
        error: any;
    }>;
    findAllRelatorioPorData({ dateinicial, datefinal, pessoId, usuarioId, equipamentoId, beneficioId, statusid, }: BuscaEntrega): Promise<({
        equipamento: {
            id: string;
            nome: string;
            createdAt: Date;
            updatedAt: Date | null;
            responsavel: string;
            sobre: string;
            observacao: string;
            cep: string;
            logradouro: string;
            complemento: string | null;
            bairro: string;
            localidade: string;
            numero: string;
            uf: string;
            status: import(".prisma/client").$Enums.status_code;
        };
        usuario: {
            id: string;
            nome: string;
            createdAt: Date;
            updatedAt: Date | null;
            status: import(".prisma/client").$Enums.status_code;
            email: string;
            senha: string;
            telefone: string;
            equipamentoId: string;
        };
        pessoa: {
            id: string;
            nome: string;
            createdAt: Date;
            updatedAt: Date | null;
            observacao: string | null;
            cep: string;
            logradouro: string;
            complemento: string | null;
            bairro: string;
            localidade: string;
            numero: string;
            uf: string;
            status: import(".prisma/client").$Enums.status_code;
            email: string | null;
            telefone: string | null;
            equipamentoId: string;
            cpf: string;
            sexo: string;
            datanascimento: Date;
            rg: string | null;
            parentesco: string | null;
            escolaridade: string;
            estadocivil: string;
            renda: Prisma.Decimal;
            ctpsassinada: number;
            ppcl: number;
            gestante: number;
            observacaorestrita: string | null;
            pessoaId: string | null;
        };
        beneficio: {
            id: string;
            nome: string;
            createdAt: Date;
            updatedAt: Date | null;
            status: import(".prisma/client").$Enums.status_code;
            descricao: string;
            categoria: string;
            valor: Prisma.Decimal;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date | null;
        observacao: string;
        status: import(".prisma/client").$Enums.status_code;
        equipamentoId: string;
        usuarioId: string;
        quantidade: number;
        datacadastro: Date;
        pessoId: string;
        beneficioId: string;
    })[]>;
    changeStatus(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date | null;
        observacao: string;
        status: import(".prisma/client").$Enums.status_code;
        equipamentoId: string;
        usuarioId: string;
        quantidade: number;
        datacadastro: Date;
        pessoId: string;
        beneficioId: string;
    } | {
        error: string;
    }>;
}
